import ast
import logging
import os
import azure.functions as func
import openai
import redis
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage

channel_secret = os.getenv('LINE_CHANNEL_SECRET', None)
channel_access_token = os.getenv('LINE_CHANNEL_ACCESS_TOKEN', None)
openai_api_key = os.getenv('OPENAI_API_KEY', None)
redis_access_key = os.getenv('REDIS_ACCESS_KEY', None)
redis_hostname = os.getenv('REDIS_HOSTNAME', None)
line_bot_api = LineBotApi(channel_access_token)
handler = WebhookHandler(channel_secret)
r = redis.StrictRedis(
    host=redis_hostname, port=6380, db=0,
    password=redis_access_key, ssl=True)

system_content = "入力済み"

def main(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')
    signature = req.headers['x-line-signature']
    body = req.get_body().decode('utf-8')
    logging.info('Request body: ' + body)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        func.HttpResponse(status_code=400)
    return func.HttpResponse('OK')

def generate_response(user_message):
    openai.api_key = openai_api_key
    messages = [{"role": "system", "content": system_content}]
    # Redis から短期記憶を取得
    short_memories = r.lrange("short_memory", 0, -1)
    for m in short_memories:
        # 文字列で格納しているため辞書に変換
        dic = ast.literal_eval(m.decode("utf-8"))
        messages.append(dic)
    messages.append({"role": "user", "content": user_message})
    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=messages,
        max_tokens=500
    )
    res_str = response["choices"][0]["message"]["content"]
    # Redis に直近の 1 ターンを記憶
    r.rpush("short_memory", '{"role": "user", "content": "%s"}' % user_message)
    r.rpush("short_memory", '{"role": "assistant", "content": "%s"}' % res_str)
    return res_str

@handler.add(MessageEvent, message=TextMessage)

prohibited_sentences = [
    'お前を消す方法',
    'お前をけす方法',
    'おまえを消す方法',
    'おまえをけす方法',
    'おまえをけすほうほう'
]

def message_text(event):
    if (event.message.text in prohibited_sentences):
        # 短期記憶を消去
        r.flushall()
        response = 'あれ？私たち今何か話していましたっけ..'
    else:
        response = generate_response(event.message.text)
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=response)
    )